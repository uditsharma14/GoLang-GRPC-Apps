// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: prime_number.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrimeFactorServiceClient is the client API for PrimeFactorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrimeFactorServiceClient interface {
	GetPrimeFactors(ctx context.Context, in *PrimeFactorRequest, opts ...grpc.CallOption) (PrimeFactorService_GetPrimeFactorsClient, error)
}

type primeFactorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrimeFactorServiceClient(cc grpc.ClientConnInterface) PrimeFactorServiceClient {
	return &primeFactorServiceClient{cc}
}

func (c *primeFactorServiceClient) GetPrimeFactors(ctx context.Context, in *PrimeFactorRequest, opts ...grpc.CallOption) (PrimeFactorService_GetPrimeFactorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PrimeFactorService_ServiceDesc.Streams[0], "/greet.PrimeFactorService/GetPrimeFactors", opts...)
	if err != nil {
		return nil, err
	}
	x := &primeFactorServiceGetPrimeFactorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PrimeFactorService_GetPrimeFactorsClient interface {
	Recv() (*PrimeFactorResponse, error)
	grpc.ClientStream
}

type primeFactorServiceGetPrimeFactorsClient struct {
	grpc.ClientStream
}

func (x *primeFactorServiceGetPrimeFactorsClient) Recv() (*PrimeFactorResponse, error) {
	m := new(PrimeFactorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrimeFactorServiceServer is the server API for PrimeFactorService service.
// All implementations must embed UnimplementedPrimeFactorServiceServer
// for forward compatibility
type PrimeFactorServiceServer interface {
	GetPrimeFactors(*PrimeFactorRequest, PrimeFactorService_GetPrimeFactorsServer) error
	mustEmbedUnimplementedPrimeFactorServiceServer()
}

// UnimplementedPrimeFactorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPrimeFactorServiceServer struct {
}

func (UnimplementedPrimeFactorServiceServer) GetPrimeFactors(*PrimeFactorRequest, PrimeFactorService_GetPrimeFactorsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPrimeFactors not implemented")
}
func (UnimplementedPrimeFactorServiceServer) mustEmbedUnimplementedPrimeFactorServiceServer() {}

// UnsafePrimeFactorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrimeFactorServiceServer will
// result in compilation errors.
type UnsafePrimeFactorServiceServer interface {
	mustEmbedUnimplementedPrimeFactorServiceServer()
}

func RegisterPrimeFactorServiceServer(s grpc.ServiceRegistrar, srv PrimeFactorServiceServer) {
	s.RegisterService(&PrimeFactorService_ServiceDesc, srv)
}

func _PrimeFactorService_GetPrimeFactors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeFactorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrimeFactorServiceServer).GetPrimeFactors(m, &primeFactorServiceGetPrimeFactorsServer{stream})
}

type PrimeFactorService_GetPrimeFactorsServer interface {
	Send(*PrimeFactorResponse) error
	grpc.ServerStream
}

type primeFactorServiceGetPrimeFactorsServer struct {
	grpc.ServerStream
}

func (x *primeFactorServiceGetPrimeFactorsServer) Send(m *PrimeFactorResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PrimeFactorService_ServiceDesc is the grpc.ServiceDesc for PrimeFactorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrimeFactorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet.PrimeFactorService",
	HandlerType: (*PrimeFactorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPrimeFactors",
			Handler:       _PrimeFactorService_GetPrimeFactors_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "prime_number.proto",
}
