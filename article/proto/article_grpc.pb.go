// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: article.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArticleServiceClient is the client API for ArticleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleServiceClient interface {
	CreateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*ArticleId, error)
	UpdateArticle(ctx context.Context, in *ArticleId, opts ...grpc.CallOption) (*ArticleId, error)
	DeleteArticle(ctx context.Context, in *ArticleId, opts ...grpc.CallOption) (*ArticleId, error)
	ReadArticle(ctx context.Context, in *ArticleId, opts ...grpc.CallOption) (*ArticleId, error)
	ListArticles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ArticleService_ListArticlesClient, error)
}

type articleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleServiceClient(cc grpc.ClientConnInterface) ArticleServiceClient {
	return &articleServiceClient{cc}
}

func (c *articleServiceClient) CreateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*ArticleId, error) {
	out := new(ArticleId)
	err := c.cc.Invoke(ctx, "/article.ArticleService/CreateArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) UpdateArticle(ctx context.Context, in *ArticleId, opts ...grpc.CallOption) (*ArticleId, error) {
	out := new(ArticleId)
	err := c.cc.Invoke(ctx, "/article.ArticleService/UpdateArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) DeleteArticle(ctx context.Context, in *ArticleId, opts ...grpc.CallOption) (*ArticleId, error) {
	out := new(ArticleId)
	err := c.cc.Invoke(ctx, "/article.ArticleService/DeleteArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) ReadArticle(ctx context.Context, in *ArticleId, opts ...grpc.CallOption) (*ArticleId, error) {
	out := new(ArticleId)
	err := c.cc.Invoke(ctx, "/article.ArticleService/ReadArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) ListArticles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ArticleService_ListArticlesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArticleService_ServiceDesc.Streams[0], "/article.ArticleService/ListArticles", opts...)
	if err != nil {
		return nil, err
	}
	x := &articleServiceListArticlesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ArticleService_ListArticlesClient interface {
	Recv() (*Article, error)
	grpc.ClientStream
}

type articleServiceListArticlesClient struct {
	grpc.ClientStream
}

func (x *articleServiceListArticlesClient) Recv() (*Article, error) {
	m := new(Article)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArticleServiceServer is the server API for ArticleService service.
// All implementations must embed UnimplementedArticleServiceServer
// for forward compatibility
type ArticleServiceServer interface {
	CreateArticle(context.Context, *Article) (*ArticleId, error)
	UpdateArticle(context.Context, *ArticleId) (*ArticleId, error)
	DeleteArticle(context.Context, *ArticleId) (*ArticleId, error)
	ReadArticle(context.Context, *ArticleId) (*ArticleId, error)
	ListArticles(*emptypb.Empty, ArticleService_ListArticlesServer) error
	mustEmbedUnimplementedArticleServiceServer()
}

// UnimplementedArticleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArticleServiceServer struct {
}

func (UnimplementedArticleServiceServer) CreateArticle(context.Context, *Article) (*ArticleId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (UnimplementedArticleServiceServer) UpdateArticle(context.Context, *ArticleId) (*ArticleId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedArticleServiceServer) DeleteArticle(context.Context, *ArticleId) (*ArticleId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (UnimplementedArticleServiceServer) ReadArticle(context.Context, *ArticleId) (*ArticleId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadArticle not implemented")
}
func (UnimplementedArticleServiceServer) ListArticles(*emptypb.Empty, ArticleService_ListArticlesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListArticles not implemented")
}
func (UnimplementedArticleServiceServer) mustEmbedUnimplementedArticleServiceServer() {}

// UnsafeArticleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServiceServer will
// result in compilation errors.
type UnsafeArticleServiceServer interface {
	mustEmbedUnimplementedArticleServiceServer()
}

func RegisterArticleServiceServer(s grpc.ServiceRegistrar, srv ArticleServiceServer) {
	s.RegisterService(&ArticleService_ServiceDesc, srv)
}

func _ArticleService_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.ArticleService/CreateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).CreateArticle(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.ArticleService/UpdateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).UpdateArticle(ctx, req.(*ArticleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.ArticleService/DeleteArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).DeleteArticle(ctx, req.(*ArticleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_ReadArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).ReadArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.ArticleService/ReadArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).ReadArticle(ctx, req.(*ArticleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_ListArticles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArticleServiceServer).ListArticles(m, &articleServiceListArticlesServer{stream})
}

type ArticleService_ListArticlesServer interface {
	Send(*Article) error
	grpc.ServerStream
}

type articleServiceListArticlesServer struct {
	grpc.ServerStream
}

func (x *articleServiceListArticlesServer) Send(m *Article) error {
	return x.ServerStream.SendMsg(m)
}

// ArticleService_ServiceDesc is the grpc.ServiceDesc for ArticleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "article.ArticleService",
	HandlerType: (*ArticleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArticle",
			Handler:    _ArticleService_CreateArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _ArticleService_UpdateArticle_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _ArticleService_DeleteArticle_Handler,
		},
		{
			MethodName: "ReadArticle",
			Handler:    _ArticleService_ReadArticle_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListArticles",
			Handler:       _ArticleService_ListArticles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "article.proto",
}
